// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: grpc/protos/gameEvent.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GameEventService_GetGameEvent_FullMethodName    = "/transcendence.GameEventService/GetGameEvent"
	GameEventService_CreateGameEvent_FullMethodName = "/transcendence.GameEventService/CreateGameEvent"
)

// GameEventServiceClient is the client API for GameEventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition for GameEvents
type GameEventServiceClient interface {
	// Get a specific game event by its ID
	GetGameEvent(ctx context.Context, in *GetGameEventRequest, opts ...grpc.CallOption) (*GameEvent, error)
	// Create a new game event
	CreateGameEvent(ctx context.Context, in *CreateGameEventRequest, opts ...grpc.CallOption) (*GameEvent, error)
}

type gameEventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGameEventServiceClient(cc grpc.ClientConnInterface) GameEventServiceClient {
	return &gameEventServiceClient{cc}
}

func (c *gameEventServiceClient) GetGameEvent(ctx context.Context, in *GetGameEventRequest, opts ...grpc.CallOption) (*GameEvent, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GameEvent)
	err := c.cc.Invoke(ctx, GameEventService_GetGameEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameEventServiceClient) CreateGameEvent(ctx context.Context, in *CreateGameEventRequest, opts ...grpc.CallOption) (*GameEvent, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GameEvent)
	err := c.cc.Invoke(ctx, GameEventService_CreateGameEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameEventServiceServer is the server API for GameEventService service.
// All implementations must embed UnimplementedGameEventServiceServer
// for forward compatibility.
//
// Service definition for GameEvents
type GameEventServiceServer interface {
	// Get a specific game event by its ID
	GetGameEvent(context.Context, *GetGameEventRequest) (*GameEvent, error)
	// Create a new game event
	CreateGameEvent(context.Context, *CreateGameEventRequest) (*GameEvent, error)
	mustEmbedUnimplementedGameEventServiceServer()
}

// UnimplementedGameEventServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGameEventServiceServer struct{}

func (UnimplementedGameEventServiceServer) GetGameEvent(context.Context, *GetGameEventRequest) (*GameEvent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameEvent not implemented")
}
func (UnimplementedGameEventServiceServer) CreateGameEvent(context.Context, *CreateGameEventRequest) (*GameEvent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGameEvent not implemented")
}
func (UnimplementedGameEventServiceServer) mustEmbedUnimplementedGameEventServiceServer() {}
func (UnimplementedGameEventServiceServer) testEmbeddedByValue()                          {}

// UnsafeGameEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameEventServiceServer will
// result in compilation errors.
type UnsafeGameEventServiceServer interface {
	mustEmbedUnimplementedGameEventServiceServer()
}

func RegisterGameEventServiceServer(s grpc.ServiceRegistrar, srv GameEventServiceServer) {
	// If the following call pancis, it indicates UnimplementedGameEventServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GameEventService_ServiceDesc, srv)
}

func _GameEventService_GetGameEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameEventServiceServer).GetGameEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameEventService_GetGameEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameEventServiceServer).GetGameEvent(ctx, req.(*GetGameEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameEventService_CreateGameEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGameEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameEventServiceServer).CreateGameEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameEventService_CreateGameEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameEventServiceServer).CreateGameEvent(ctx, req.(*CreateGameEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GameEventService_ServiceDesc is the grpc.ServiceDesc for GameEventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameEventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transcendence.GameEventService",
	HandlerType: (*GameEventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGameEvent",
			Handler:    _GameEventService_GetGameEvent_Handler,
		},
		{
			MethodName: "CreateGameEvent",
			Handler:    _GameEventService_CreateGameEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/protos/gameEvent.proto",
}
