syntax = "proto3";

package transcendence;

option go_package = "./protos";

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

// Message to define a Game
message Game {
    int32 id = 1;
    string state = 2;                // State of the game
    int32 points_player_a = 3;       // Points for player A
    int32 points_player_b = 4;       // Points for player B
    int32 player_a_id = 5;           // FK to User for Player A
    int32 player_b_id = 6;           // FK to User for Player B
    bool finished = 7;               // Whether the game is finished
    google.protobuf.Timestamp created_at = 8; // Timestamp of game creation
    google.protobuf.Timestamp updated_at = 9; // Timestamp of last update
}

// Service definition for Games
service GameService {
    // Get a specific game by its ID
    rpc GetGame (GetGameRequest) returns (Game);

    // Get a list of ongoing games (not finished)
    rpc GetOngoingGames (GetOngoingGamesRequest) returns (GetOngoingGamesResponse);

    // Create a new game
    rpc CreateGame (CreateGameRequest) returns (Game);

    rpc StartGame (StartGameRequest) returns (StartGameResponse); // Start a game and provide WebSocket updates URL
    rpc HandleGameFinished (GameFinishedRequest) returns (google.protobuf.Empty); // Receive update if the game is finished
}

// Requests and Responses for RPCs

// Request to get a specific game by ID
message GetGameRequest {
    int32 game_id = 1;
}

// Request to get ongoing games (not finished)
message GetOngoingGamesRequest {}

// Response containing a list of ongoing games
message GetOngoingGamesResponse {
    repeated Game games = 1;
}

// Request to create a new game
message CreateGameRequest {
    string state = 1;                // Initial game state
    int32 points_player_a = 2;       // Initial points for player A
    int32 points_player_b = 3;       // Initial points for player B
    int32 player_a_id = 4;           // FK to User for Player A
    int32 player_b_id = 5;           // FK to User for Player B
}

// Request to start a game
message StartGameRequest {
    int32 game_id = 1; // ID of the game to start
}

// Response when starting a game
message StartGameResponse {
    bool success = 1;        // Whether the game successfully started
    string websocket_url = 2; // URL for WebSocket connection to get real-time updates
}

// Request when receiving update about game completion
message GameFinishedRequest {
    int32 game_id = 1;        // ID of the completed game
    int32 points_player_a = 2; // Final points of player A
    int32 points_player_b = 3; // Final points of player B
    int32 winner_player_id = 4; // ID of the winning player (or 0 for a draw)
}