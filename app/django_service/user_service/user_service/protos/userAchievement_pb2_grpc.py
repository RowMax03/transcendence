# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import userAchievement_pb2 as userAchievement__pb2


class UserAchievementServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetUserAchievementById = channel.unary_unary(
                '/models.UserAchievementService/GetUserAchievementById',
                request_serializer=userAchievement__pb2.GetUserAchievementByIdRequest.SerializeToString,
                response_deserializer=userAchievement__pb2.UserAchievement.FromString,
                )
        self.GetUserAchievementsByUserId = channel.unary_unary(
                '/models.UserAchievementService/GetUserAchievementsByUserId',
                request_serializer=userAchievement__pb2.GetUserAchievementsByUserIdRequest.SerializeToString,
                response_deserializer=userAchievement__pb2.UserAchievementsResponse.FromString,
                )
        self.CreateUserAchievement = channel.unary_unary(
                '/models.UserAchievementService/CreateUserAchievement',
                request_serializer=userAchievement__pb2.CreateUserAchievementRequest.SerializeToString,
                response_deserializer=userAchievement__pb2.UserAchievement.FromString,
                )


class UserAchievementServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetUserAchievementById(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserAchievementsByUserId(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateUserAchievement(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UserAchievementServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetUserAchievementById': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserAchievementById,
                    request_deserializer=userAchievement__pb2.GetUserAchievementByIdRequest.FromString,
                    response_serializer=userAchievement__pb2.UserAchievement.SerializeToString,
            ),
            'GetUserAchievementsByUserId': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserAchievementsByUserId,
                    request_deserializer=userAchievement__pb2.GetUserAchievementsByUserIdRequest.FromString,
                    response_serializer=userAchievement__pb2.UserAchievementsResponse.SerializeToString,
            ),
            'CreateUserAchievement': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateUserAchievement,
                    request_deserializer=userAchievement__pb2.CreateUserAchievementRequest.FromString,
                    response_serializer=userAchievement__pb2.UserAchievement.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'models.UserAchievementService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class UserAchievementService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetUserAchievementById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/models.UserAchievementService/GetUserAchievementById',
            userAchievement__pb2.GetUserAchievementByIdRequest.SerializeToString,
            userAchievement__pb2.UserAchievement.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetUserAchievementsByUserId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/models.UserAchievementService/GetUserAchievementsByUserId',
            userAchievement__pb2.GetUserAchievementsByUserIdRequest.SerializeToString,
            userAchievement__pb2.UserAchievementsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateUserAchievement(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/models.UserAchievementService/CreateUserAchievement',
            userAchievement__pb2.CreateUserAchievementRequest.SerializeToString,
            userAchievement__pb2.UserAchievement.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
