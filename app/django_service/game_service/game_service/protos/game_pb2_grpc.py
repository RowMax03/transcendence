# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import game_pb2 as game__pb2


class GameServiceStub(object):
    """Service definition for Games
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetGame = channel.unary_unary(
                '/transcendence.GameService/GetGame',
                request_serializer=game__pb2.GetGameRequest.SerializeToString,
                response_deserializer=game__pb2.Game.FromString,
                )
        self.GetOngoingGames = channel.unary_unary(
                '/transcendence.GameService/GetOngoingGames',
                request_serializer=game__pb2.GetOngoingGamesRequest.SerializeToString,
                response_deserializer=game__pb2.GetOngoingGamesResponse.FromString,
                )
        self.CreateGame = channel.unary_unary(
                '/transcendence.GameService/CreateGame',
                request_serializer=game__pb2.CreateGameRequest.SerializeToString,
                response_deserializer=game__pb2.Game.FromString,
                )


class GameServiceServicer(object):
    """Service definition for Games
    """

    def GetGame(self, request, context):
        """Get a specific game by its ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOngoingGames(self, request, context):
        """Get a list of ongoing games (not finished)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateGame(self, request, context):
        """Create a new game
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GameServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetGame': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGame,
                    request_deserializer=game__pb2.GetGameRequest.FromString,
                    response_serializer=game__pb2.Game.SerializeToString,
            ),
            'GetOngoingGames': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOngoingGames,
                    request_deserializer=game__pb2.GetOngoingGamesRequest.FromString,
                    response_serializer=game__pb2.GetOngoingGamesResponse.SerializeToString,
            ),
            'CreateGame': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateGame,
                    request_deserializer=game__pb2.CreateGameRequest.FromString,
                    response_serializer=game__pb2.Game.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'transcendence.GameService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GameService(object):
    """Service definition for Games
    """

    @staticmethod
    def GetGame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/transcendence.GameService/GetGame',
            game__pb2.GetGameRequest.SerializeToString,
            game__pb2.Game.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetOngoingGames(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/transcendence.GameService/GetOngoingGames',
            game__pb2.GetOngoingGamesRequest.SerializeToString,
            game__pb2.GetOngoingGamesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateGame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/transcendence.GameService/CreateGame',
            game__pb2.CreateGameRequest.SerializeToString,
            game__pb2.Game.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
