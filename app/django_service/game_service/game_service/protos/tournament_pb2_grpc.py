# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from . import tournament_pb2 as tournament__pb2

GRPC_GENERATED_VERSION = '1.69.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in tournament_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class TournamentServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetTournamentRoom = channel.unary_unary(
                '/transcendence.TournamentService/GetTournamentRoom',
                request_serializer=tournament__pb2.GetTournamentRoomRequest.SerializeToString,
                response_deserializer=tournament__pb2.TournamentRoom.FromString,
                _registered_method=True)
        self.ListTournamentRooms = channel.unary_unary(
                '/transcendence.TournamentService/ListTournamentRooms',
                request_serializer=tournament__pb2.ListTournamentRoomsRequest.SerializeToString,
                response_deserializer=tournament__pb2.ListTournamentRoomsResponse.FromString,
                _registered_method=True)
        self.CreateTournamentRoom = channel.unary_unary(
                '/transcendence.TournamentService/CreateTournamentRoom',
                request_serializer=tournament__pb2.CreateTournamentRoomRequest.SerializeToString,
                response_deserializer=tournament__pb2.TournamentRoom.FromString,
                _registered_method=True)
        self.UpdateTournamentRoom = channel.unary_unary(
                '/transcendence.TournamentService/UpdateTournamentRoom',
                request_serializer=tournament__pb2.UpdateTournamentRoomRequest.SerializeToString,
                response_deserializer=tournament__pb2.TournamentRoom.FromString,
                _registered_method=True)
        self.DeleteTournamentRoom = channel.unary_unary(
                '/transcendence.TournamentService/DeleteTournamentRoom',
                request_serializer=tournament__pb2.DeleteTournamentRoomRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.GetTournamentUser = channel.unary_unary(
                '/transcendence.TournamentService/GetTournamentUser',
                request_serializer=tournament__pb2.GetTournamentUserRequest.SerializeToString,
                response_deserializer=tournament__pb2.TournamentUser.FromString,
                _registered_method=True)
        self.ListTournamentUsers = channel.unary_unary(
                '/transcendence.TournamentService/ListTournamentUsers',
                request_serializer=tournament__pb2.ListTournamentUsersRequest.SerializeToString,
                response_deserializer=tournament__pb2.ListTournamentUsersResponse.FromString,
                _registered_method=True)
        self.CreateTournamentUser = channel.unary_unary(
                '/transcendence.TournamentService/CreateTournamentUser',
                request_serializer=tournament__pb2.CreateTournamentUserRequest.SerializeToString,
                response_deserializer=tournament__pb2.TournamentUser.FromString,
                _registered_method=True)
        self.UpdateTournamentUser = channel.unary_unary(
                '/transcendence.TournamentService/UpdateTournamentUser',
                request_serializer=tournament__pb2.UpdateTournamentUserRequest.SerializeToString,
                response_deserializer=tournament__pb2.TournamentUser.FromString,
                _registered_method=True)
        self.DeleteTournamentUser = channel.unary_unary(
                '/transcendence.TournamentService/DeleteTournamentUser',
                request_serializer=tournament__pb2.DeleteTournamentUserRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.GetTournamentGameMapping = channel.unary_unary(
                '/transcendence.TournamentService/GetTournamentGameMapping',
                request_serializer=tournament__pb2.GetTournamentGameMappingRequest.SerializeToString,
                response_deserializer=tournament__pb2.TournamentGameMapping.FromString,
                _registered_method=True)
        self.ListTournamentGameMappings = channel.unary_unary(
                '/transcendence.TournamentService/ListTournamentGameMappings',
                request_serializer=tournament__pb2.ListTournamentGameMappingsRequest.SerializeToString,
                response_deserializer=tournament__pb2.ListTournamentGameMappingsResponse.FromString,
                _registered_method=True)
        self.CreateTournamentGameMapping = channel.unary_unary(
                '/transcendence.TournamentService/CreateTournamentGameMapping',
                request_serializer=tournament__pb2.CreateTournamentGameMappingRequest.SerializeToString,
                response_deserializer=tournament__pb2.TournamentGameMapping.FromString,
                _registered_method=True)
        self.DeleteTournamentGameMapping = channel.unary_unary(
                '/transcendence.TournamentService/DeleteTournamentGameMapping',
                request_serializer=tournament__pb2.DeleteTournamentGameMappingRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)


class TournamentServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetTournamentRoom(self, request, context):
        """Tournament Room RPCs
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTournamentRooms(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateTournamentRoom(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateTournamentRoom(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteTournamentRoom(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTournamentUser(self, request, context):
        """Tournament User RPCs
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTournamentUsers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateTournamentUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateTournamentUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteTournamentUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTournamentGameMapping(self, request, context):
        """Tournament Game Mapping RPCs
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTournamentGameMappings(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateTournamentGameMapping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteTournamentGameMapping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TournamentServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetTournamentRoom': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTournamentRoom,
                    request_deserializer=tournament__pb2.GetTournamentRoomRequest.FromString,
                    response_serializer=tournament__pb2.TournamentRoom.SerializeToString,
            ),
            'ListTournamentRooms': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTournamentRooms,
                    request_deserializer=tournament__pb2.ListTournamentRoomsRequest.FromString,
                    response_serializer=tournament__pb2.ListTournamentRoomsResponse.SerializeToString,
            ),
            'CreateTournamentRoom': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTournamentRoom,
                    request_deserializer=tournament__pb2.CreateTournamentRoomRequest.FromString,
                    response_serializer=tournament__pb2.TournamentRoom.SerializeToString,
            ),
            'UpdateTournamentRoom': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateTournamentRoom,
                    request_deserializer=tournament__pb2.UpdateTournamentRoomRequest.FromString,
                    response_serializer=tournament__pb2.TournamentRoom.SerializeToString,
            ),
            'DeleteTournamentRoom': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteTournamentRoom,
                    request_deserializer=tournament__pb2.DeleteTournamentRoomRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'GetTournamentUser': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTournamentUser,
                    request_deserializer=tournament__pb2.GetTournamentUserRequest.FromString,
                    response_serializer=tournament__pb2.TournamentUser.SerializeToString,
            ),
            'ListTournamentUsers': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTournamentUsers,
                    request_deserializer=tournament__pb2.ListTournamentUsersRequest.FromString,
                    response_serializer=tournament__pb2.ListTournamentUsersResponse.SerializeToString,
            ),
            'CreateTournamentUser': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTournamentUser,
                    request_deserializer=tournament__pb2.CreateTournamentUserRequest.FromString,
                    response_serializer=tournament__pb2.TournamentUser.SerializeToString,
            ),
            'UpdateTournamentUser': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateTournamentUser,
                    request_deserializer=tournament__pb2.UpdateTournamentUserRequest.FromString,
                    response_serializer=tournament__pb2.TournamentUser.SerializeToString,
            ),
            'DeleteTournamentUser': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteTournamentUser,
                    request_deserializer=tournament__pb2.DeleteTournamentUserRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'GetTournamentGameMapping': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTournamentGameMapping,
                    request_deserializer=tournament__pb2.GetTournamentGameMappingRequest.FromString,
                    response_serializer=tournament__pb2.TournamentGameMapping.SerializeToString,
            ),
            'ListTournamentGameMappings': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTournamentGameMappings,
                    request_deserializer=tournament__pb2.ListTournamentGameMappingsRequest.FromString,
                    response_serializer=tournament__pb2.ListTournamentGameMappingsResponse.SerializeToString,
            ),
            'CreateTournamentGameMapping': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTournamentGameMapping,
                    request_deserializer=tournament__pb2.CreateTournamentGameMappingRequest.FromString,
                    response_serializer=tournament__pb2.TournamentGameMapping.SerializeToString,
            ),
            'DeleteTournamentGameMapping': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteTournamentGameMapping,
                    request_deserializer=tournament__pb2.DeleteTournamentGameMappingRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'transcendence.TournamentService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('transcendence.TournamentService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TournamentService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetTournamentRoom(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/transcendence.TournamentService/GetTournamentRoom',
            tournament__pb2.GetTournamentRoomRequest.SerializeToString,
            tournament__pb2.TournamentRoom.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListTournamentRooms(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/transcendence.TournamentService/ListTournamentRooms',
            tournament__pb2.ListTournamentRoomsRequest.SerializeToString,
            tournament__pb2.ListTournamentRoomsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateTournamentRoom(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/transcendence.TournamentService/CreateTournamentRoom',
            tournament__pb2.CreateTournamentRoomRequest.SerializeToString,
            tournament__pb2.TournamentRoom.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateTournamentRoom(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/transcendence.TournamentService/UpdateTournamentRoom',
            tournament__pb2.UpdateTournamentRoomRequest.SerializeToString,
            tournament__pb2.TournamentRoom.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteTournamentRoom(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/transcendence.TournamentService/DeleteTournamentRoom',
            tournament__pb2.DeleteTournamentRoomRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTournamentUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/transcendence.TournamentService/GetTournamentUser',
            tournament__pb2.GetTournamentUserRequest.SerializeToString,
            tournament__pb2.TournamentUser.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListTournamentUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/transcendence.TournamentService/ListTournamentUsers',
            tournament__pb2.ListTournamentUsersRequest.SerializeToString,
            tournament__pb2.ListTournamentUsersResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateTournamentUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/transcendence.TournamentService/CreateTournamentUser',
            tournament__pb2.CreateTournamentUserRequest.SerializeToString,
            tournament__pb2.TournamentUser.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateTournamentUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/transcendence.TournamentService/UpdateTournamentUser',
            tournament__pb2.UpdateTournamentUserRequest.SerializeToString,
            tournament__pb2.TournamentUser.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteTournamentUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/transcendence.TournamentService/DeleteTournamentUser',
            tournament__pb2.DeleteTournamentUserRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTournamentGameMapping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/transcendence.TournamentService/GetTournamentGameMapping',
            tournament__pb2.GetTournamentGameMappingRequest.SerializeToString,
            tournament__pb2.TournamentGameMapping.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListTournamentGameMappings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/transcendence.TournamentService/ListTournamentGameMappings',
            tournament__pb2.ListTournamentGameMappingsRequest.SerializeToString,
            tournament__pb2.ListTournamentGameMappingsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateTournamentGameMapping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/transcendence.TournamentService/CreateTournamentGameMapping',
            tournament__pb2.CreateTournamentGameMappingRequest.SerializeToString,
            tournament__pb2.TournamentGameMapping.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteTournamentGameMapping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/transcendence.TournamentService/DeleteTournamentGameMapping',
            tournament__pb2.DeleteTournamentGameMappingRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
